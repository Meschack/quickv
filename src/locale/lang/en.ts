import { RulesMessages } from "../../contracts";

export const en_messages: RulesMessages = {
  default: "The :field is invalid",
  required: "The :field field is required",
  email: "Please enter a valid email address",
  maxlength: "The maximum number of characters allowed has been exceeded",
  minlength: "The minimum number of characters allowed has not been reached",
  min: "The :field field must be greater than or equal to ':min'",
  max: "The :field field must be less than or equal to ':max'",
  string: "Please enter a string of characters",
  between: "This field value must be in ':min' and ':max'",
  startWith: "The :field field must be started with ':startWith'",
  endWith: "The :field field must be ended with ':endWith'",
  contains: "The :field field must contain the value ':contains'",
  in: "Please choose a correct value for the :field field",
  integer: "The :field field must an integer",
  int: "The :field field must an integer",
  number: "This field must be a number",
  numeric: "This field must be a number",
  file: "This field must be a file",
  url: "This field must be a valid url",
  length: "The size of this must be :size",
  len: "The size of this must be :size",
  maxFileSize: "The file size must be smaller than :maxFileSize.",
  minFileSize: "The file size must be larger than :minFileSize.",
  size: "This field's size should be less than or equal to :size ",
  boolean: "This field must be a boolean (yes or no) included",
  startWithUpper: "This field must be started with capitale letter",
  startWithLower: "This field must be started with capitale letter",
  nullable: "",
  password:
    "The password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a digit, and a special character.",
  date: "This field must be a valid date",
  before: "The date must be before (:beforeDate)",
  after: "The date must be after (:afterDate)",
  same: "This field must be same as :same field value",
  requiredIf: "The :field is required once the :other have the current value",
  requiredWhen: "The :field is required when :otherFields are present",
  phone: "This phone number appears to be invalid.",
  time: "The :field must be a valid time",
  startWithLetter: "The :field must start with a letter.",
  excludes: "The :field field must not contain :excludes.",
  hasLetter: "The :field field must contain at least one letter.",
  regex: "This field is invalid",
  lower: "The :field input must be lower",
  upper: "The :field input must be upper",
};
